/** @file makefile *//**
@defgroup make Make Environment
@ingroup intro


                     <h3> Introduction </h3>

pico]OS comes with a powerful make environment based on GNU Make.
The make files are universal to all target platforms and most compilers.
They are the first step to platform independent software developement. @n

The core files of the make environment are located in the subdirectory
<tt>picoos/make</tt>. The main makefile for pico]OS is stored in the
pico]OS root directory, and every platform port comes with a makefile
that teaches the platform dependent environment to the make system. @n

The makefiles were tested with GNU make 3.80 @n



@n                 <h3> Compiling pico]OS </h3>

To compile the pico]OS library, you need to execute the makefile in the
pico]OS root directory. The makefile knows three targets, that are: @n

 - @c all    builds the pico]OS library
 - @c clean  deletes all binaries generated by previous make run
 - @c docu   builds the documentation using the doxygen tool

The targets @c all and @c clean need the additional parameter @c PORT that
specifies the destination port. For example, a valid make call would look
like this (at the DOS prompt): @n

@code
C:\picoos-0.7.0> gmake all PORT=6502
@endcode

This will build pico]OS for the 6502 processor family. After the successful
execution of make you will find two new subdirectories: The @c obj
directory contains all generated object files, and the @c lib directory
the final library. @n

There is a second option available on the command line: @c BUILD=DEBUG
would build a debug version of the operating system, and a @c BUILD=RELEASE
would build a release version. Note that the debug version is the default
when this option is not given. @n

@b Note:  The name of the port is the name of its subdirectory
          in the @c ports directory. @n



@n               <h3> Building An Application </h3>

The pico]OS library is only the first step to an executable. The make
environment supports also the linking of object files and libraries
to get an executable. For example, you have written a 'hello world'
program that uses pico]OS. To compile and link the file @c hello.c you
need to perform the following steps: @n

 - create a subdirectory somewhere in the @c picoos directory tree
 - place your file @c hello.c in this directory
 - generate and place a makefile in the same directory. The makefile
   should look like this:

@code
01  #
02  # This makefile compiles hello.c and generates an executable
03  #
04
05  # This test program shall be compiled for the 6502 port
06  PORT = 6502
07
08  # Set build mode (DEBUG or RELEASE)
09  BUILD = DEBUG
10
11  # To include the pico]OS nano layer, set this define to 1
12  NANO = 0
13
14  # Set relative path to the picoos root directory and include base make file
15  RELROOT = ../../../
16  include $(RELROOT)make/common.mak
17
18  # --------------------------------------------------------------------------
19
20  # Set target file name
21  TARGET = hello
22
23  # Set source files
24  SRC_TXT = hello.c
25  SRC_OBJ =
26  SRC_LIB =
27
28  # Set the directory that contains the configuration header files
29  DIR_CONFIG =
30
31  # ---------------------------------------------------------------------------
32
33  # Build an executable
34  include $(MAKE_OUT)

@endcode

The lines 15, 16, 21, 24 and 34 are mandatory. The @c PORT variable may also
be set at the command line when make is invoked, even like the @c BUILD mode.
@c RELROOT sets the relative way to the pico]OS root directory.
In line 12 you can enable the nano layer of pico]OS that is available with
pico]OS 0.8.0.  Line 16 includes the main makefile of the make environment.
Line 18 sets the name of the executable to generate. Note that only the
basename must be specified, in our example the executable @c hello.c64
will be generated.
Lines 24 to 26 set the source files that shall be linked to the pico]OS
library. @c SRC_TXT specifies a list of sourcecode files (in textual form).
@c SRC_OBJ and @c SRC_LIB specify a list of existing object files and
libraries that shall be linked to the executable. If your application uses
an other configuration than the default, you can place your own configuration
files @c poscfg.h and @c noscfg.h into your project directory. You must then
set @c DIR_CONFIG (line 29) to the place where the configuration files are
located. Note that this path is absolute to the pico]OS root, so if your
project directory is <tt>picoos-0.7.0/myproject</tt>, you would set
<tt>DIR_CONFIG = myproject</tt>. Finally, the line 34 includes the makefile
that starts the build process. @n
To build your application, simply invoke make with the target @c all to
generate the executable. The executable is then stored in the directory
<tt>picoos-0.7.0/out</tt>.
The makefile supports also the target @c clean that cleans your
last build again. @n



@n               <h3> Format Of File port.mak </h3>

Each platform port need to have a special version of the file port.mak.
This file is used to tell the make environment the settings needed to
compile files for the platform. This settings include: The compiler /
linker / archiver to use, runtime libraries to link to the exectuable,
file extension names, and various port specific settings.
Here is an example how the file <tt>port.mak</tt> may look like: @n


@code

01  #
02  # port.mak for the 6502 port
03  #
04  
05  # Compiler: Define place of compiler
06  CC65 = h:/cc65
07  
08  # Compiler: Define target type
09  TG = c64
10  
11  # Set to 1 to include generic pico]OS "findbit" function
12  GENERIC_FINDBIT = 0
13  
14  # Define extensions
15  EXT_C   = .c
16  EXT_ASM = .s
17  EXT_OBJ = .o
18  EXT_LIB = .lib
19  EXT_OUT = .$(TG)
20  
21  # Define tools: compiler, assembler, archiver, linker
22  CC = $(CC65)/bin/cc65
23  AS = $(CC65)/bin/ca65
24  AR = $(CC65)/bin/ar65
25  LD = $(CC65)/bin/ld65
26  
27  # Define to 1 if CC outputs an assembly file
28  CC2ASM = 1
29  
30  # Define general options
31  OPT_CC_INC   = -I
32  OPT_CC_DEF   = -D
33  OPT_AS_INC   = -I
34  OPT_AS_DEF   = -D
35  OPT_AR_ADD   =
36  OPT_LD_SEP   = 
37  OPT_LD_PFOBJ = 
38  OPT_LD_PFLIB = 
39  OPT_LD_FIRST = $(CC65)/lib/$(TG).o
40  OPT_LD_LAST  = $(CC65)/lib/$(TG).lib
41  
42  # Set global defines for compiler / assembler
43  CDEFINES =
44  ADEFINES =
45  
46  # Set global includes
47  CINCLUDES = $(CC65)\include .
48  AINCLUDES = $(CC65)\include .
49  
50  # Distinguish between build modes
51  ifeq '$(BUILD)' 'DEBUG'
52    CFLAGS   += -g
53    AFLAGS   += -g
54    CDEFINES += _DBG
55    ADEFINES += _DBG
56  else
57    CDEFINES += _REL
58    ADEFINES += _REL
59  endif
60  
61  # Define Compiler Flags
62  CFLAGS += -t $(TG) -O -A -T -o 
63  
64  # Define Assembler Flags
65  ASFLAGS += -t $(TG) -o 
66  
67  # Define Linker Flags
68  LDFLAGS = -t $(TG) -Ln $(DIR_OUT)/$(TARGET).lbl -m $(DIR_OUT)/$(TARGET).map -o 
69  
70  # Define archiver flags
71  ARFLAGS = a 

@endcode

The lines 12, 15 - 19, 22 - 25, 28, 31 - 40, 54 - 55, 57 - 58, 62, 65, 68
and 71 are mandatory.
If @c GENERIC_FINDBIT (line 12) is enabled (= set to 1), the file fbit_gen.c
is compiled and linked to the pico]OS library. Some compilers need a special
handling to compile C-files. If @c CC2ASM is set to 1, the make system will
first generate assembly files from C source files before generating the
final object file from the intermediate assembly file.


*/
